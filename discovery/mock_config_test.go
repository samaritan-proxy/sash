// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan-api/go/api (interfaces: DiscoveryService_StreamSvcConfigsServer)

// Package discovery is a generated GoMock package.
package discovery

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/samaritan-proxy/samaritan-api/go/api"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockDiscoveryService_StreamSvcConfigsServer is a mock of DiscoveryService_StreamSvcConfigsServer interface
type MockDiscoveryService_StreamSvcConfigsServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_StreamSvcConfigsServerMockRecorder
}

// MockDiscoveryService_StreamSvcConfigsServerMockRecorder is the mock recorder for MockDiscoveryService_StreamSvcConfigsServer
type MockDiscoveryService_StreamSvcConfigsServerMockRecorder struct {
	mock *MockDiscoveryService_StreamSvcConfigsServer
}

// NewMockDiscoveryService_StreamSvcConfigsServer creates a new mock instance
func NewMockDiscoveryService_StreamSvcConfigsServer(ctrl *gomock.Controller) *MockDiscoveryService_StreamSvcConfigsServer {
	mock := &MockDiscoveryService_StreamSvcConfigsServer{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_StreamSvcConfigsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_StreamSvcConfigsServer) EXPECT() *MockDiscoveryService_StreamSvcConfigsServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).Context))
}

// Recv mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) Recv() (*api.SvcConfigDiscoveryRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.SvcConfigDiscoveryRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) Send(arg0 *api.SvcConfigDiscoveryResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockDiscoveryService_StreamSvcConfigsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockDiscoveryService_StreamSvcConfigsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDiscoveryService_StreamSvcConfigsServer)(nil).SetTrailer), arg0)
}
