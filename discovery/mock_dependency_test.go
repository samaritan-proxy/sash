// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samaritan-proxy/samaritan-api/go/api (interfaces: DiscoveryService_StreamDependenciesServer)

// Package discovery is a generated GoMock package.
package discovery

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/samaritan-proxy/samaritan-api/go/api"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockDiscoveryService_StreamDependenciesServer is a mock of DiscoveryService_StreamDependenciesServer interface
type MockDiscoveryService_StreamDependenciesServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_StreamDependenciesServerMockRecorder
}

// MockDiscoveryService_StreamDependenciesServerMockRecorder is the mock recorder for MockDiscoveryService_StreamDependenciesServer
type MockDiscoveryService_StreamDependenciesServerMockRecorder struct {
	mock *MockDiscoveryService_StreamDependenciesServer
}

// NewMockDiscoveryService_StreamDependenciesServer creates a new mock instance
func NewMockDiscoveryService_StreamDependenciesServer(ctrl *gomock.Controller) *MockDiscoveryService_StreamDependenciesServer {
	mock := &MockDiscoveryService_StreamDependenciesServer{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_StreamDependenciesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_StreamDependenciesServer) EXPECT() *MockDiscoveryService_StreamDependenciesServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) Send(arg0 *api.DependencyDiscoveryResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockDiscoveryService_StreamDependenciesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockDiscoveryService_StreamDependenciesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDiscoveryService_StreamDependenciesServer)(nil).SetTrailer), arg0)
}
