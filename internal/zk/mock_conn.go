// Code generated by MockGen. DO NOT EDIT.
// Source: ./conn.go

// Package zk is a generated GoMock package.
package zk

import (
	gomock "github.com/golang/mock/gomock"
	zk "github.com/mesosphere/go-zookeeper/zk"
	reflect "reflect"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockConn) Get(path string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockConnMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConn)(nil).Get), path)
}

// Children mocks base method
func (m *MockConn) Children(path string) ([]string, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Children indicates an expected call of Children
func (mr *MockConnMockRecorder) Children(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockConn)(nil).Children), path)
}

// Exists mocks base method
func (m *MockConn) Exists(path string) (bool, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists
func (mr *MockConnMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockConn)(nil).Exists), path)
}

// Close mocks base method
func (m *MockConn) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}
